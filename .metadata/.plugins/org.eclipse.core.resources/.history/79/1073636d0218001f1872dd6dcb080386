package main;

import java.awt.Graphics;
import java.awt.Toolkit;

// Clase principal del juego que implementa Runnable para el bucle del juego
public class Game implements Runnable {
    private GameWindow gameWindow; // Ventana del juego
    private MenuPanel menuPanel; // Panel del menú
    private GamePanel gamePanel; // Panel del juego
    private Thread gameThread; // Hilo del juego
    private final int FPS_SET = 120; // FPS objetivo
    private final int UPS_SET = 200; // UPS objetivo

    private Jugador player; // Jugador
    private ManejoDeNiveles levelManager; // Gestor de niveles

    // Constantes de tamaño y escala del juego
    public final static int TILES_DEFAULT_SIZE = 32;
    public final static float SCALE = 1.5f; 
    public final static int TILES_IN_WIDTH = 18;
    public final static int TILES_IN_HEIGHT = 18;
    public final static int TILES_SIZE = (int) (TILES_DEFAULT_SIZE * SCALE);
    public final static int GAME_WIDTH = TILES_SIZE * TILES_IN_WIDTH;
    public final static int GAME_HEIGHT = TILES_SIZE * TILES_IN_HEIGHT;

    // Constructor del juego
    public Game() {
        initClasses();
        menuPanel = new MenuPanel(this); // Inicializar con MenuPanel
        gameWindow = new GameWindow(menuPanel); // Inicializar la ventana con el panel del menú
        startGameLoop(); // Siempre la última línea del constructor
    }

    // Método para inicializar las clases principales del juego
    private void initClasses() {
        levelManager = new ManejoDeNiveles(this);
        player = new Jugador(200, 200, (int) (17 * SCALE), (int) (16 * SCALE));
        player.loadLvlData(levelManager.getCurrentLevel().getLevelData());
    }

    // Método para iniciar el bucle del juego
    private void startGameLoop() {
        gameThread = new Thread(this);
        gameThread.start();
    }

    // Método para actualizar la lógica del juego
    private void update() {
        if (gamePanel != null) {
            levelManager.update();
            player.update();
        }
    }

    // Método para renderizar el juego en la pantalla
    public void render(Graphics g) {
        levelManager.draw(g);
        player.render(g);
    }

    // Método run para el bucle del juego
    @Override
    public void run() {
        double timePerFrame = 1000000000.0 / FPS_SET;
        double timePerUpdate = 1000000000.0 / UPS_SET;

        long previousTime = System.nanoTime();
        long lastCheck = System.currentTimeMillis();

        int frames = 0;
        int updates = 0;

        double deltaUpdates = 0;
        double deltaFrames = 0;

        while (true) {
            long currentTime = System.nanoTime();

            deltaUpdates += (currentTime - previousTime) / timePerUpdate;
            deltaFrames += (currentTime - previousTime) / timePerFrame;
            previousTime = currentTime;

            if (deltaUpdates >= 1) {
                update();
                updates++;
                deltaUpdates--;
            }

            if (deltaFrames >= 1 && gamePanel != null) {
                gamePanel.repaint();
                Toolkit.getDefaultToolkit().sync();
                frames++;
                deltaFrames--;
            }

//            if (System.currentTimeMillis() - lastCheck >= 1000) {
//                lastCheck = System.currentTimeMillis();
//                System.out.println("FPS: " + frames + " | UPS: " + updates);
//                frames = 0;
//                updates = 0;
//            }
        }
    }

    // Método para manejar la pérdida de foco de la ventana
    public void windowFocusLost() {
        if (player != null) {
            player.resetDirBooleans();
        }
    }

    // Método para obtener al jugador
    public Jugador getPlayer() {
        return player;
    }

    // Método para iniciar el juego desde el menú
    public void startGame() {
        gamePanel = new GamePanel(this);
        gameWindow.setPanel(gamePanel); // Cambiar al panel del juego
        gamePanel.requestFocus();
    }
}

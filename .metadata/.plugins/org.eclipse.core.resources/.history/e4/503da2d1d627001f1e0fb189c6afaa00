package main;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;
import jugadores.Jugador1;
import jugadores.Jugador2;
import niveles.ManejoDeNiveles;
import multijugador.Cliente;
import multijugador.Servidor;

public class Game implements Runnable {
    private GameWindow gameWindow; // Ventana del juego
    private MenuPanel menuPanel; // Panel del menú
    private GamePanel gamePanel; // Panel del juego
    private PlayerSelectionPanel playerSelectionPanel; // Panel de selección de jugadores
    private Thread gameThread; // Hilo del juego
    private final int FPS_SET = 120; // FPS objetivo
    private final int UPS_SET = 200; // UPS objetivo

    private Jugador1 player1; // Jugador 1
    private Jugador2 player2; // Jugador 2
    private ManejoDeNiveles levelManager; // Gestor de niveles

    private Servidor servidor; // Instancia del servidor
    private Cliente cliente; // Instancia del cliente
    private String player1Username;
    private String player2Username;
    
    private static boolean isServer; // Boleana para comprovar si es servidor
    public static boolean policeWin;

    // Constantes de tamaño y escala del juego
    public final static int TILES_DEFAULT_SIZE = 32;
    public final static float SCALE = 1.5f; 
    public final static int TILES_IN_WIDTH = 18;
    public final static int TILES_IN_HEIGHT = 18;
    public final static int TILES_SIZE = (int) (TILES_DEFAULT_SIZE * SCALE);
    public final static int GAME_WIDTH = TILES_SIZE * TILES_IN_WIDTH;
    public final static int GAME_HEIGHT = TILES_SIZE * TILES_IN_HEIGHT;

    private int timeLeft = 60;
    private boolean gameOver = false;
    private Timer timer;

    // Constructor del juego
    public Game() {
        initClasses();
        menuPanel = new MenuPanel(this); // Inicializar con MenuPanel
        gameWindow = new GameWindow(menuPanel); // Inicializar la ventana con el panel del menú
        startGameLoop(); // Siempre la última línea del constructor
    }

    // Método para inicializar las clases principales del juego
    private void initClasses() {
        levelManager = new ManejoDeNiveles(this);
        player1 = new Jugador1(200, 200, (int) (15 * SCALE), (int) (16 * SCALE));
        player2 = new Jugador2(400, 200, (int) (28 * SCALE), (int) (21 * SCALE));
        player1.loadLvlData(levelManager.getCurrentLevel().getLevelData());
        player2.loadLvlData(levelManager.getCurrentLevel().getLevelData());
    }

    // Método para iniciar el bucle del juego
    private void startGameLoop() {
        gameThread = new Thread(this);
        gameThread.start();
    }

    private void startTimer() {
        int delay = 1000; // milisegundos
        ActionListener listener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (!gameOver) {
                    timeLeft--;
                    if (timeLeft <= 0) {
                        gameOver = true;
                        timeLeft = 0;
                        ((Timer) e.getSource()).stop();
                    }
                }
            }
        };
        timer = new Timer(delay, listener);
        timer.start();
    }

    // Método para actualizar la lógica del juego
    private void update() {
        if (gamePanel != null && !gameOver) {
            levelManager.update();
            player1.update();
            player2.update();
            win(); // Verificar colisión en cada actualización
        }
        if (gameOver) {
            levelManager.update();
        }
    }

    // Método para renderizar el juego en la pantalla
    public void render(Graphics g) {
        if (gamePanel != null) {
            levelManager.draw(g);
            player1.render(g);
            player2.render(g);
            drawTimeLeft(g);
            if (gameOver) {
                drawGameOver(g);
            }
        }
    }

    private void drawTimeLeft(Graphics g) {
        g.setColor(Color.WHITE);
        g.setFont(new Font("Arial", Font.PLAIN, 20));
        g.drawString("Time Left: " + timeLeft, GAME_WIDTH - 150, 30);
    }

    private void drawGameOver(Graphics g) {
        if (policeWin) {
            g.setColor(Color.RED);
            g.setFont(new Font("Arial", Font.BOLD, 50));
            g.drawString("Player 2 WIN", GAME_WIDTH / 2 - 185, GAME_HEIGHT / 2 - 100);
            g.drawString("Game Over ", GAME_WIDTH / 2 - 150, GAME_HEIGHT / 2);
            //g.drawString("Press esc to restart", GAME_WIDTH / 2 - 125, GAME_HEIGHT / 2);
            
        } else {
            g.setColor(Color.RED);
            g.setFont(new Font("Arial", Font.BOLD, 50));
            g.drawString("Player 1 WIN", GAME_WIDTH / 2 - 185, GAME_HEIGHT / 2 - 100);
            g.drawString("Game Over ", GAME_WIDTH / 2 - 150, GAME_HEIGHT / 2);
            //g.drawString("Press esc to restart", GAME_WIDTH / 2 - 125, GAME_HEIGHT / 2);
        }
    }

    // Método run para el bucle del juego
    @Override
    public void run() {
        double timePerFrame = 1000000000.0 / FPS_SET;
        double timePerUpdate = 1000000000.0 / UPS_SET;

        long previousTime = System.nanoTime();
        long lastCheck = System.currentTimeMillis();

        int frames = 0;
        int updates = 0;

        double deltaUpdates = 0;
        double deltaFrames = 0;

        while (true) {
            long currentTime = System.nanoTime();

            deltaUpdates += (currentTime - previousTime) / timePerUpdate;
            deltaFrames += (currentTime - previousTime) / timePerFrame;
            previousTime = currentTime;

            if (deltaUpdates >= 1) {
                update();
                updates++;
                deltaUpdates--;
            }

            if (deltaFrames >= 1 && gamePanel != null) {
                gamePanel.repaint();
                Toolkit.getDefaultToolkit().sync();
                frames++;
                deltaFrames--;
            }

            if (System.currentTimeMillis() - lastCheck >= 1000) {
                lastCheck = System.currentTimeMillis();
                System.out.println("FPS: " + frames + " | UPS: " + updates);
                frames = 0;
                updates = 0;
            }
        }
    }

    // Método para manejar la pérdida de foco de la ventana
    public void windowFocusLost() {
        player1.resetDirBooleans();
        player2.resetDirBooleans();
    }

    // Métodos para obtener los jugadores
    public Jugador1 getPlayer1() {
        return player1;
    }

    public Jugador2 getPlayer2() {
        return player2;
    }

    public boolean getIsServer() {
        return isServer;
    }

    public void setIsServer(boolean x) {
        isServer = x;
    }

    public boolean getPoliceWin() {
        return policeWin;
    }

    public void setPoliceWin(boolean x) {
        policeWin = x;
    }

    public Game getGame() {
        return this;
    }
    public int getTimeLeft() {
        return timeLeft;
    }

    // Método para iniciar el juego desde el menú
    public void startGame(String player1Username, String player2Username) {
        this.player1Username = player1Username;
        this.player2Username = player2Username;
        gamePanel = new GamePanel(this);
        gameWindow.setPanel(gamePanel); // Cambiar al panel del juego
        gamePanel.requestFocus();
        startTimer(); // Iniciar el temporizador al iniciar el juego
    }

    // Método para mostrar el panel de selección de jugadores
    public void showPlayerSelectionPanel() {
        playerSelectionPanel = new PlayerSelectionPanel(this);
        gameWindow.setPanel(playerSelectionPanel); // Cambiar al panel de selección de jugadores
        playerSelectionPanel.requestFocus();
    }
    //metodo para que cuando el policia alcance al coche,gane la partida
    public void win() {
        if (player2.getHitbox().intersects(player1.getHitbox())) {
            policeWin = true;
            gameOver = true;
            System.out.println("Player 2 wins!");
            recordGameResult(player2Username, player1Username);
        } else if (timeLeft <= 0) {
            gameOver = true;
            recordGameResult(player1Username, player2Username);
        }
    }
    private void recordGameResult(String winner, String loser) {
        GameRecorder.recordGame(winner, loser);
    }

    // Métodos para iniciar el servidor y el cliente
    public void startServer() {
        servidor = new Servidor(this);
        new Thread(() -> servidor.start()).start();
    }

    public void startClient() {
        cliente = new Cliente(this);
        new Thread(() -> cliente.start()).start();
    }
 // Método para reiniciar el juego
    public void restart() {

        // Reiniciar variables de estado del juego
        timeLeft = 60;
        gameOver = false;
        policeWin = false;

        // Reiniciar jugadores y niveles
        player1 = new Jugador1(200, 200, (int) (15 * SCALE), (int) (16 * SCALE));
        player2 = new Jugador2(400, 200, (int) (28 * SCALE), (int) (21 * SCALE));
        player1.loadLvlData(levelManager.getCurrentLevel().getLevelData());
        player2.loadLvlData(levelManager.getCurrentLevel().getLevelData());

        // Reiniciar el panel del juego
        startGame();
    }
   
}
